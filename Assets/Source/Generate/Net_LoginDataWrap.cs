//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Net_LoginDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Net.LoginData), typeof(System.Object));
		L.RegFunction("Clone", Clone);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToString", ToString);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("CalculateSize", CalculateSize);
		L.RegFunction("MergeFrom", MergeFrom);
		L.RegFunction("New", _CreateNet_LoginData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("UsernameFieldNumber", 1);
		L.RegConstant("PasswdFieldNumber", 2);
		L.RegConstant("OptFieldNumber", 3);
		L.RegVar("Parser", get_Parser, null);
		L.RegVar("Descriptor", get_Descriptor, null);
		L.RegVar("Username", get_Username, set_Username);
		L.RegVar("Passwd", get_Passwd, set_Passwd);
		L.RegVar("Opt", get_Opt, set_Opt);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNet_LoginData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Net.LoginData obj = new Net.LoginData();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				Net.LoginData arg0 = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
				Net.LoginData obj = new Net.LoginData(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Net.LoginData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
			Net.LoginData o = obj.Clone();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Net.LoginData>(L, 2))
			{
				Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
				Net.LoginData arg0 = (Net.LoginData)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.LoginData.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
			Google.Protobuf.CodedOutputStream arg0 = (Google.Protobuf.CodedOutputStream)ToLua.CheckObject(L, 2, typeof(Google.Protobuf.CodedOutputStream));
			obj.WriteTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
			int o = obj.CalculateSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MergeFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Net.LoginData>(L, 2))
			{
				Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
				Net.LoginData arg0 = (Net.LoginData)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Google.Protobuf.CodedInputStream>(L, 2))
			{
				Net.LoginData obj = (Net.LoginData)ToLua.CheckObject(L, 1, typeof(Net.LoginData));
				Google.Protobuf.CodedInputStream arg0 = (Google.Protobuf.CodedInputStream)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.LoginData.MergeFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parser(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Net.LoginData.Parser);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Descriptor(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Net.LoginData.Descriptor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Username(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			string ret = obj.Username;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Username on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Passwd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			string ret = obj.Passwd;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Passwd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Opt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			Net.LoginData.Types.Operation ret = obj.Opt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Opt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Username(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Username = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Username on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Passwd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Passwd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Passwd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Opt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net.LoginData obj = (Net.LoginData)o;
			Net.LoginData.Types.Operation arg0 = (Net.LoginData.Types.Operation)ToLua.CheckObject(L, 2, typeof(Net.LoginData.Types.Operation));
			obj.Opt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Opt on a nil value");
		}
	}
}

